// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: gateway/v1/gateway.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A request for a prompt - sending user input to the server.
struct Gateway_V1_PromptRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The User prompt variables
  /// This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
  var templateVariables: Dictionary<String,String> = [:]

  /// Optional Identifier designating the prompt config ID to use. If not set, the default prompt config will be used.
  var promptConfigID: String {
    get {return _promptConfigID ?? String()}
    set {_promptConfigID = newValue}
  }
  /// Returns true if `promptConfigID` has been explicitly set.
  var hasPromptConfigID: Bool {return self._promptConfigID != nil}
  /// Clears the value of `promptConfigID`. Subsequent reads from it will return its default value.
  mutating func clearPromptConfigID() {self._promptConfigID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _promptConfigID: String? = nil
}

/// A Prompt Response Message
struct Gateway_V1_PromptResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Prompt Content
  var content: String = String()

  /// Number of tokens used for the prompt request
  var requestTokens: UInt32 = 0

  /// Number of tokens used for the prompt response
  var responseTokens: UInt32 = 0

  /// Request duration
  var requestDuration: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// An Streaming Prompt Response Message
struct Gateway_V1_StreamingPromptResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Prompt Content
  var content: String = String()

  /// Finish reason, given when the stream ends
  var finishReason: String {
    get {return _finishReason ?? String()}
    set {_finishReason = newValue}
  }
  /// Returns true if `finishReason` has been explicitly set.
  var hasFinishReason: Bool {return self._finishReason != nil}
  /// Clears the value of `finishReason`. Subsequent reads from it will return its default value.
  mutating func clearFinishReason() {self._finishReason = nil}

  /// Number of tokens used for the prompt request, given when the stream ends
  var requestTokens: UInt32 {
    get {return _requestTokens ?? 0}
    set {_requestTokens = newValue}
  }
  /// Returns true if `requestTokens` has been explicitly set.
  var hasRequestTokens: Bool {return self._requestTokens != nil}
  /// Clears the value of `requestTokens`. Subsequent reads from it will return its default value.
  mutating func clearRequestTokens() {self._requestTokens = nil}

  /// Number of tokens used for the prompt response, given when the stream ends
  var responseTokens: UInt32 {
    get {return _responseTokens ?? 0}
    set {_responseTokens = newValue}
  }
  /// Returns true if `responseTokens` has been explicitly set.
  var hasResponseTokens: Bool {return self._responseTokens != nil}
  /// Clears the value of `responseTokens`. Subsequent reads from it will return its default value.
  mutating func clearResponseTokens() {self._responseTokens = nil}

  /// Stream duration, given when the stream ends
  var streamDuration: UInt32 {
    get {return _streamDuration ?? 0}
    set {_streamDuration = newValue}
  }
  /// Returns true if `streamDuration` has been explicitly set.
  var hasStreamDuration: Bool {return self._streamDuration != nil}
  /// Clears the value of `streamDuration`. Subsequent reads from it will return its default value.
  mutating func clearStreamDuration() {self._streamDuration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _finishReason: String? = nil
  fileprivate var _requestTokens: UInt32? = nil
  fileprivate var _responseTokens: UInt32? = nil
  fileprivate var _streamDuration: UInt32? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Gateway_V1_PromptRequest: @unchecked Sendable {}
extension Gateway_V1_PromptResponse: @unchecked Sendable {}
extension Gateway_V1_StreamingPromptResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "gateway.v1"

extension Gateway_V1_PromptRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PromptRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "template_variables"),
    2: .standard(proto: "prompt_config_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.templateVariables) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._promptConfigID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.templateVariables.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.templateVariables, fieldNumber: 1)
    }
    try { if let v = self._promptConfigID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateway_V1_PromptRequest, rhs: Gateway_V1_PromptRequest) -> Bool {
    if lhs.templateVariables != rhs.templateVariables {return false}
    if lhs._promptConfigID != rhs._promptConfigID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateway_V1_PromptResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PromptResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
    2: .standard(proto: "request_tokens"),
    3: .standard(proto: "response_tokens"),
    4: .standard(proto: "request_duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.requestTokens) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.responseTokens) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.requestDuration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 1)
    }
    if self.requestTokens != 0 {
      try visitor.visitSingularUInt32Field(value: self.requestTokens, fieldNumber: 2)
    }
    if self.responseTokens != 0 {
      try visitor.visitSingularUInt32Field(value: self.responseTokens, fieldNumber: 3)
    }
    if self.requestDuration != 0 {
      try visitor.visitSingularUInt32Field(value: self.requestDuration, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateway_V1_PromptResponse, rhs: Gateway_V1_PromptResponse) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs.requestTokens != rhs.requestTokens {return false}
    if lhs.responseTokens != rhs.responseTokens {return false}
    if lhs.requestDuration != rhs.requestDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateway_V1_StreamingPromptResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StreamingPromptResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
    2: .standard(proto: "finish_reason"),
    3: .standard(proto: "request_tokens"),
    4: .standard(proto: "response_tokens"),
    5: .standard(proto: "stream_duration"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._finishReason) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._requestTokens) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._responseTokens) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._streamDuration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 1)
    }
    try { if let v = self._finishReason {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._requestTokens {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._responseTokens {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._streamDuration {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateway_V1_StreamingPromptResponse, rhs: Gateway_V1_StreamingPromptResponse) -> Bool {
    if lhs.content != rhs.content {return false}
    if lhs._finishReason != rhs._finishReason {return false}
    if lhs._requestTokens != rhs._requestTokens {return false}
    if lhs._responseTokens != rhs._responseTokens {return false}
    if lhs._streamDuration != rhs._streamDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
