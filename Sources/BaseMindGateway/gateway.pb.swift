// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/gateway/v1/gateway.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

/// A request for a prompt - sending user input to the server.
public struct Gateway_V1_PromptRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The User prompt variables
    /// This is a hash-map of variables that should have the same keys as those contained by the PromptConfigResponse
    public var templateVariables: [String: String] = [:]

    /// Optional Identifier designating the prompt config ID to use. If not set, the default prompt config will be used.
    public var promptConfigID: String {
        get { _promptConfigID ?? String() }
        set { _promptConfigID = newValue }
    }

    /// Returns true if `promptConfigID` has been explicitly set.
    public var hasPromptConfigID: Bool { _promptConfigID != nil }
    /// Clears the value of `promptConfigID`. Subsequent reads from it will return its default value.
    public mutating func clearPromptConfigID() { _promptConfigID = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    private var _promptConfigID: String?
}

/// A Prompt Response Message
public struct Gateway_V1_PromptResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Prompt Content
    public var content: String = .init()

    /// Number of tokens used for the prompt request
    public var requestTokens: UInt32 = 0

    /// Number of tokens used for the prompt response
    public var responseTokens: UInt32 = 0

    /// Request duration
    public var requestDuration: UInt32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

/// An Streaming Prompt Response Message
public struct Gateway_V1_StreamingPromptResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Prompt Content
    public var content: String = .init()

    /// Finish reason, given when the stream ends
    public var finishReason: String {
        get { _finishReason ?? String() }
        set { _finishReason = newValue }
    }

    /// Returns true if `finishReason` has been explicitly set.
    public var hasFinishReason: Bool { _finishReason != nil }
    /// Clears the value of `finishReason`. Subsequent reads from it will return its default value.
    public mutating func clearFinishReason() { _finishReason = nil }

    /// Number of tokens used for the prompt request, given when the stream ends
    public var requestTokens: UInt32 {
        get { _requestTokens ?? 0 }
        set { _requestTokens = newValue }
    }

    /// Returns true if `requestTokens` has been explicitly set.
    public var hasRequestTokens: Bool { _requestTokens != nil }
    /// Clears the value of `requestTokens`. Subsequent reads from it will return its default value.
    public mutating func clearRequestTokens() { _requestTokens = nil }

    /// Number of tokens used for the prompt response, given when the stream ends
    public var responseTokens: UInt32 {
        get { _responseTokens ?? 0 }
        set { _responseTokens = newValue }
    }

    /// Returns true if `responseTokens` has been explicitly set.
    public var hasResponseTokens: Bool { _responseTokens != nil }
    /// Clears the value of `responseTokens`. Subsequent reads from it will return its default value.
    public mutating func clearResponseTokens() { _responseTokens = nil }

    /// Stream duration, given when the stream ends
    public var streamDuration: UInt32 {
        get { _streamDuration ?? 0 }
        set { _streamDuration = newValue }
    }

    /// Returns true if `streamDuration` has been explicitly set.
    public var hasStreamDuration: Bool { _streamDuration != nil }
    /// Clears the value of `streamDuration`. Subsequent reads from it will return its default value.
    public mutating func clearStreamDuration() { _streamDuration = nil }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    private var _finishReason: String?
    private var _requestTokens: UInt32?
    private var _responseTokens: UInt32?
    private var _streamDuration: UInt32?
}

#if swift(>=5.5) && canImport(_Concurrency)
    extension Gateway_V1_PromptRequest: @unchecked Sendable {}
    extension Gateway_V1_PromptResponse: @unchecked Sendable {}
    extension Gateway_V1_StreamingPromptResponse: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "gateway.v1"

extension Gateway_V1_PromptRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".PromptRequest"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "template_variables"),
        2: .standard(proto: "prompt_config_id"),
    ]

    public mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString, SwiftProtobuf.ProtobufString>.self, value: &templateVariables)
            case 2: try decoder.decodeSingularStringField(value: &_promptConfigID)
            default: break
            }
        }
    }

    public func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !templateVariables.isEmpty {
            try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString, SwiftProtobuf.ProtobufString>.self, value: templateVariables, fieldNumber: 1)
        }
        try { if let v = self._promptConfigID {
            try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Gateway_V1_PromptRequest, rhs: Gateway_V1_PromptRequest) -> Bool {
        if lhs.templateVariables != rhs.templateVariables { return false }
        if lhs._promptConfigID != rhs._promptConfigID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Gateway_V1_PromptResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".PromptResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "content"),
        2: .standard(proto: "request_tokens"),
        3: .standard(proto: "response_tokens"),
        4: .standard(proto: "request_duration"),
    ]

    public mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &content)
            case 2: try decoder.decodeSingularUInt32Field(value: &requestTokens)
            case 3: try decoder.decodeSingularUInt32Field(value: &responseTokens)
            case 4: try decoder.decodeSingularUInt32Field(value: &requestDuration)
            default: break
            }
        }
    }

    public func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        if !content.isEmpty {
            try visitor.visitSingularStringField(value: content, fieldNumber: 1)
        }
        if requestTokens != 0 {
            try visitor.visitSingularUInt32Field(value: requestTokens, fieldNumber: 2)
        }
        if responseTokens != 0 {
            try visitor.visitSingularUInt32Field(value: responseTokens, fieldNumber: 3)
        }
        if requestDuration != 0 {
            try visitor.visitSingularUInt32Field(value: requestDuration, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Gateway_V1_PromptResponse, rhs: Gateway_V1_PromptResponse) -> Bool {
        if lhs.content != rhs.content { return false }
        if lhs.requestTokens != rhs.requestTokens { return false }
        if lhs.responseTokens != rhs.responseTokens { return false }
        if lhs.requestDuration != rhs.requestDuration { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Gateway_V1_StreamingPromptResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = _protobuf_package + ".StreamingPromptResponse"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "content"),
        2: .standard(proto: "finish_reason"),
        3: .standard(proto: "request_tokens"),
        4: .standard(proto: "response_tokens"),
        5: .standard(proto: "stream_duration"),
    ]

    public mutating func decodeMessage(decoder: inout some SwiftProtobuf.Decoder) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &content)
            case 2: try decoder.decodeSingularStringField(value: &_finishReason)
            case 3: try decoder.decodeSingularUInt32Field(value: &_requestTokens)
            case 4: try decoder.decodeSingularUInt32Field(value: &_responseTokens)
            case 5: try decoder.decodeSingularUInt32Field(value: &_streamDuration)
            default: break
            }
        }
    }

    public func traverse(visitor: inout some SwiftProtobuf.Visitor) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !content.isEmpty {
            try visitor.visitSingularStringField(value: content, fieldNumber: 1)
        }
        try { if let v = self._finishReason {
            try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._requestTokens {
            try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
        } }()
        try { if let v = self._responseTokens {
            try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
        } }()
        try { if let v = self._streamDuration {
            try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    public static func == (lhs: Gateway_V1_StreamingPromptResponse, rhs: Gateway_V1_StreamingPromptResponse) -> Bool {
        if lhs.content != rhs.content { return false }
        if lhs._finishReason != rhs._finishReason { return false }
        if lhs._requestTokens != rhs._requestTokens { return false }
        if lhs._responseTokens != rhs._responseTokens { return false }
        if lhs._streamDuration != rhs._streamDuration { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
